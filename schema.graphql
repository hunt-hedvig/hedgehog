schema {
  query: QueryType
  mutation: MutationType
}

type QueryType {
  member(id: ID!): Member
  claim(id: ID!): Claim
  paymentSchedule(status: ChargeStatus!): [SchedulerState]
  me: Me!
  switchableSwitcherEmails: [SwitchableSwitcherEmail!]!
  messageHistory(memberId: ID!): [ChatMessage!]!
  questionGroups: [QuestionGroup!]!
  itemCategories(kind: ItemCategoryKind!, parentId: ID): [ItemCategory!]!
  claimItems(claimId: ID!): [ClaimItem!]!
  findPartnerCampaigns(input: CampaignFilter!): [VoucherCampaign!]!
  getPartnerCampaignOwners: [CampaignOwnerPartner!]!
  availableCampaignCodeTypes: [String!]!
  dashboardNumbers: DashboardNumbers
  getClaimItemValuation(request: GetValuationInput): ClaimItemValuation!
  canValuateClaimItem(
    typeOfContract: String!
    itemFamilyId: String!
    itemTypeId: ID
  ): CanValuateClaimItem
  quoteSchemaForContractType(contractType: String!): JSON
  memberSearch(
    query: String!
    options: MemberSearchOptions!
  ): MemberSearchResult!
  listClaims(options: ListClaimsOptions!): ListClaimsResult!
  employees: [Employee!]!
  availableEmployeeRoles: [String!]!

  claimTypes: [String!]!
  claimTypeTemplates: [ClaimTypeTemplate!]!
  claimTypeTemplate(claimType: String!): ClaimTypeTemplate
  claimTypeRelations: [ClaimTypeRelation!]!
  claimProperties: [ClaimProperty!]!
  claimProperty(id: ID!): ClaimProperty!
  claimPropertyOptions: [ClaimPropertyOption!]!
  claimPropertyOption(id: ID!): ClaimPropertyOption!
}

type Me {
  email: String!
  scopes: [String!]!
  role: String!
}

type MutationType {
  chargeMember(id: ID!, amount: MonetaryAmount!): Member
  addAccountEntryToMember(
    memberId: ID!
    accountEntry: AccountEntryInput!
  ): Member!
  addMonthlyEntryToMember(
    memberId: ID!
    monthlyEntry: MonthlyEntryInput!
  ): Member!
  removeMonthlyEntry(id: ID!): Boolean
  approveMemberCharge(approvals: [MemberChargeApproval!]!): Boolean
  createPaymentCompletionLink(memberId: ID!): PaymentCompletionResponse!
  updateClaimState(id: ID!, state: ClaimState!): Claim
  createClaim(memberId: ID!, date: LocalDateTime!, source: ClaimSource!): Claim
  addClaimNote(id: ID!, note: ClaimNoteInput!): Claim
  createClaimPayment(id: ID!, payment: ClaimPaymentInput!): Claim
  createClaimSwishPayment(id: ID!, payment: ClaimSwishPaymentInput!): Claim
  setClaimType(id: ID!, type: ClaimTypes): Claim
  setClaimInformation(id: ID!, information: ClaimInformationInput!): Claim
  updateReserve(id: ID!, amount: MonetaryAmount!): Claim
  setCoveringEmployee(id: ID!, coveringEmployee: Boolean!): Claim
  whitelistMember(memberId: ID!): Member!
  markClaimFileAsDeleted(claimId: ID!, claimFileId: ID!): Boolean
  backfillSubscriptions(memberId: ID!): Member!
  setClaimFileCategory(
    claimId: ID!
    claimFileId: ID!
    category: String
  ): ClaimFileUpload
  activateQuote(
    id: ID!
    activationDate: LocalDate!
    terminationDate: LocalDate
  ): Quote!

  addAgreementFromQuote(
    id: ID!
    contractId: ID!
    activeFrom: LocalDate
    activeTo: LocalDate
    previousAgreementActiveTo: LocalDate
  ): Quote!

  createQuoteFromAgreement(agreementId: ID!, memberId: ID!): Quote!
  markSwitchableSwitcherEmailAsReminded(id: ID!): SwitchableSwitcherEmail!
  updateSwitcherEmailInfo(
    id: ID!
    request: UpdateSwitcherEmailInfoInput
  ): SwitchableSwitcherEmail!
  terminateContract(contractId: ID!, request: TerminateContractInput): Contract!
  activatePendingAgreement(
    contractId: ID!
    request: ActivatePendingAgreementInput
  ): Contract!
  changeTerminationDate(
    contractId: ID!
    request: ChangeTerminationDateInput
  ): Contract!
  revertTermination(contractId: ID!): Contract!
  createNorwegianGripenPriceEngine(
    request: CreateNorwegianGripenInput
  ): Boolean!
  addNorwegianPostalCodes(postalCodesString: String): Boolean!
  changeToDate(agreementId: ID!, request: ChangeToDateInput): Contract!
  changeFromDate(agreementId: ID!, request: ChangeFromDateInput): Contract!
  safelyEdit(agreementId: ID!, request: SafelyEditAgreementInput): Contract!
  regenerateCertificate(agreementId: ID!): Contract!
  sendMessage(input: SendMessageInput!): SendMessageResponse!
  markQuestionAsResolved(memberId: ID!): Boolean!
  answerQuestion(memberId: ID!, answer: String!): Boolean!
  updateQuoteBySchema(
    quoteId: ID!
    schemaData: JSON!
    bypassUnderwritingGuidelines: Boolean!
  ): Quote!
  createQuoteForMemberBySchema(
    memberId: ID!
    schemaData: JSON!
    bypassUnderwritingGuidelines: Boolean!
  ): Quote!
  signQuoteForNewContract(quoteId: ID!, activationDate: LocalDate): Quote!
  overrideQuotePrice(input: OverrideQuotePriceInput!): Quote!
  upsertItemCompany(request: UpsertItemCompanyInput): ID!
  upsertItemType(request: UpsertItemTypeInput): ID!
  upsertItemBrand(request: UpsertItemBrandInput): ID!
  upsertItemModel(request: UpsertItemModelInput): ID!
  upsertClaimItem(request: UpsertClaimItemInput): ID!
  deleteClaimItem(claimItemId: ID!): Boolean!
  insertItemCategories(request: InsertItemCategoriesInput): [Boolean!]!
  insertValuationRules(request: InsertValuationRulesInput): [Boolean!]!
  upsertValuationRule(request: UpsertValuationRuleInput): ID!
  createCampaignPartner(partnerId: ID!, partnerName: String!): Boolean!
  assignCampaignToPartnerPercentageDiscount(
    request: AssignVoucherPercentageDiscount
  ): Boolean!
  assignCampaignToPartnerFreeMonths(request: AssignVoucherFreeMonths): Boolean!
  assignCampaignToPartnerVisibleNoDiscount(
    request: AssignVoucherVisibleNoDiscount
  ): Boolean!
  setCampaignCodeType(id: ID!, codeType: String!): VoucherCampaign
  setContractForClaim(request: SetContractForClaim!): Claim!
  manualRedeemCampaign(
    memberId: ID!
    request: ManualRedeemCampaignInput!
  ): Member!
  manualUnRedeemCampaign(
    memberId: ID!
    request: ManualUnRedeemCampaignInput!
  ): Member!
  unsignMember(ssn: String!): Boolean!
  editMemberInfo(request: EditMemberInfoInput!): Member!
  setFraudulentStatus(
    memberId: ID!
    request: MemberFraudulentStatusInput!
  ): Member!
  createEmployee(email: String!, role: String!): Employee!
  updateEmployeeRole(id: ID!, role: String!): Employee!
  removeEmployee(id: ID!): Boolean!
  payoutMember(memberId: ID!, request: PayoutMemberInput!): Transaction

  createClaimTypeRelation(
    request: CreateClaimTypeRelationInput
  ): ClaimTypeRelation!
  deleteClaimTypeRelation(id: ID!): Boolean!
  updateClaimProperty(id: ID!, name: String!): ClaimProperty!
  deprecateClaimProperty(id: ID!): Boolean!
  createClaimProperty(name: String!): ClaimProperty!
  updateClaimPropertyOption(id: ID!, name: String!): ClaimPropertyOption!
  deprecateClaimPropertyOption(id: ID!): Boolean!
  createClaimPropertyOption(name: String): ClaimPropertyOption!
}

type ClaimTypeTemplate {
  claimType: String!
  properties: [ClaimPropertyTemplate!]!
}

type ClaimPropertyTemplate {
  propertyId: ID!
  name: String!
  options: [ClaimPropertyOption!]!
}

type ClaimTypeRelation {
  id: ID!
  claimType: String!
  property: ClaimProperty!
  propertyOption: ClaimPropertyOption!
}

type ClaimProperty {
  id: ID!
  name: String!
}

type ClaimPropertyOption {
  id: ID!
  name: String!
}

input CreateClaimTypeRelationInput {
  claimType: String!
  propertyId: ID!
  propertyOptionId: ID!
}

enum PayoutCategory {
  MARKETING
  REFERRAL
  REFUND
}

input SelectedPayoutDetails {
  type: String!
  phoneNumber: String
  ssn: String
  message: String
}

input PayoutMemberInput {
  amount: MonetaryAmount!
  sanctionBypassed: Boolean
  category: PayoutCategory
  referenceId: String
  note: String
  carrier: String
  payoutDetails: SelectedPayoutDetails
}

type ListClaimsResult {
  claims: [Claim!]!
  totalPages: Int!
  page: Int!
}

input ListClaimsOptions {
  includeAll: Boolean
  page: Int
  pageSize: Int
  sortBy: String
  sortDirection: String
  filterClaimStates: [ClaimState!]
  filterCreatedBeforeOrOnDate: LocalDate
  filterComplexities: [ClaimComplexity!]
  filterNumberOfMemberGroups: Int
  filterSelectedMemberGroups: [Int!]
  filterMarkets: [String!]
  filterTypesOfContract: [String!]
}

type MemberSearchResult {
  members: [Member!]!
  totalPages: Int!
  page: Int!
}

input MemberSearchOptions {
  includeAll: Boolean
  page: Int
  pageSize: Int
  sortBy: String
  sortDirection: String
}

type DashboardNumbers {
  numberOfClaims: Int!
  numberOfQuestions: Int!
}

input MemberFraudulentStatusInput {
  fraudulentStatus: String!
  fraudulentStatusDescription: String
}

type ClaimItem {
  id: ID!
  itemFamily: ItemFamily!
  itemType: ItemType!
  itemBrand: ItemBrand
  itemModel: ItemModel
  itemCompany: ItemCompany
  dateOfPurchase: LocalDate
  purchasePrice: MonetaryAmountV2
  valuation: MonetaryAmountV2
  note: String
}

input InsertItemCategoriesInput {
  itemCategoriesString: String!
}

input InsertValuationRulesInput {
  valuationRulesString: String!
}

input EditMemberInfoInput {
  memberId: String!
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
}

input GetValuationInput {
  purchasePrice: MonetaryAmount!
  itemFamilyId: String!
  itemTypeId: ID
  typeOfContract: String!
  purchaseDate: LocalDate!
  baseDate: LocalDate
}

type ClaimItemValuation {
  depreciatedValue: MonetaryAmountV2
  valuationRule: ValuationRule
}

type ValuationRule {
  valuationName: String!
  itemFamily: String!
  itemTypeId: ID
  ageLimit: Float!
  valuationTable: String!
  valuationType: String!
  depreciation: Int
}

type CanValuateClaimItem {
  canValuate: Boolean!
  typeOfContract: String
  itemFamily: String
  itemTypeId: ID
}

input UpsertClaimItemInput {
  id: ID
  claimId: ID!
  itemFamilyId: ID!
  itemTypeId: ID!
  itemBrandId: ID
  itemModelId: ID
  dateOfPurchase: LocalDate
  purchasePrice: MonetaryAmount
  automaticValuation: MonetaryAmount
  customValuation: MonetaryAmount
  note: String
}

input UpsertItemCompanyInput {
  id: ID
  name: String!
}

input UpsertItemTypeInput {
  id: ID
  name: String!
  itemFamilyId: ID!
}

input UpsertItemBrandInput {
  id: ID
  name: String!
  itemTypeId: ID!
  itemCompanyId: ID!
}

input UpsertItemModelInput {
  id: ID
  name: String!
  itemBrandId: ID!
}

input UpsertValuationRuleInput {
  id: ID
  name: String!
  ageLimit: Float!
  typeOfContract: String!
  itemFamilyId: String!
  itemTypeId: String
  valuationType: String!
  depreciation: Float
}

input OverrideQuotePriceInput {
  quoteId: ID!
  price: BigDecimal!
}

type Contract {
  id: ID!
  holderMemberId: ID!
  holderFirstName: String
  holderLastName: String
  switchedFrom: String
  masterInception: LocalDate
  status: ContractStatus!
  typeOfContract: String!
  isTerminated: Boolean!
  terminationDate: LocalDate
  currentAgreementId: ID!
  hasPendingAgreement: Boolean!
  genericAgreements: [GenericAgreement!]!
  hasQueuedRenewal: Boolean!
  renewal: Renewal
  preferredCurrency: String!
  market: String!
  signSource: String
  contractTypeName: String!
  createdAt: Instant!
  isLocked: Boolean!
}

enum ContractStatus {
  PENDING
  ACTIVE_IN_FUTURE
  ACTIVE_IN_FUTURE_AND_TERMINATED_IN_FUTURE
  ACTIVE
  TERMINATED_TODAY
  TERMINATED_IN_FUTURE
  TERMINATED
}

type Employee {
  id: ID!
  email: String!
  role: String!
  firstGrantedAt: Instant!
}

type GenericAgreement {
  id: ID!
  fromDate: LocalDate
  toDate: LocalDate
  premium: MonetaryAmountV2!
  certificateUrl: String
  status: AgreementStatus!
  typeOfContract: String!
  address: Address
  numberCoInsured: Int
  squareMeters: Int
  ancillaryArea: Int
  yearOfConstruction: Int
  numberOfBathrooms: Int
  extraBuildings: [ExtraBuilding!]
  isSubleted: Boolean
  lineOfBusinessName: String!
  carrier: String!
  partner: String
  createdAt: Instant!
}

enum SwedishApartmentLineOfBusiness {
  RENT
  BRF
  STUDENT_RENT
  STUDENT_BRF
}

enum NorwegianHomeContentLineOfBusiness {
  RENT
  OWN
  YOUTH_RENT
  YOUTH_OWN
}

enum NorwegianTravelLineOfBusiness {
  REGULAR
  YOUTH
}

enum AgreementStatus {
  PENDING
  ACTIVE_IN_FUTURE
  ACTIVE
  ACTIVE_IN_PAST
  TERMINATED
}

type Address {
  street: String!
  postalCode: String!
  city: String
}

type Renewal {
  renewalDate: LocalDate!
  draftCertificateUrl: String
  draftOfAgreementId: ID
}

input SetContractForClaim {
  claimId: String!
  memberId: String!
  contractId: String!
}

input TerminateContractInput {
  terminationDate: LocalDate!
  terminationReason: String!
  comment: String
}

input ChangeTerminationDateInput {
  newTerminationDate: LocalDate!
}

input ActivatePendingAgreementInput {
  pendingAgreementId: ID!
  fromDate: LocalDate!
}

input ChangeToDateInput {
  newToDate: LocalDate!
}

input ChangeFromDateInput {
  newFromDate: LocalDate!
}

input SafelyEditAgreementInput {
  newStreet: String
}

union ItemCategory = ItemFamily | ItemType | ItemBrand | ItemModel | ItemCompany

interface ItemCategoryCore {
  id: ID!
  nextKind: ItemCategoryKind
  displayName: String!
  searchTerms: String!
}

input AssignVoucherPercentageDiscount {
  partnerId: String!
  numberOfMonths: Int!
  percentageDiscount: Float!
  code: String!
  validFrom: Instant
  validUntil: Instant
  codeType: String
}

input AssignVoucherFreeMonths {
  partnerId: String!
  numberOfFreeMonths: Int!
  code: String!
  validFrom: Instant
  validUntil: Instant
  codeType: String
}

input AssignVoucherVisibleNoDiscount {
  partnerId: String!
  code: String!
  validFrom: Instant
  validUntil: Instant
  codeType: String
}

type CampaignOwnerPartner {
  partnerId: String!
}

type VoucherCampaign {
  id: ID!
  campaignCode: String!
  partnerId: String!
  partnerName: String!
  validFrom: Instant
  validTo: Instant
  incentive: Incentive
  codeType: String
}

type MonthlyPercentageDiscountFixedPeriod {
  numberOfMonths: Int
  percentage: Float
}

type FreeMonths {
  numberOfMonths: Int
}

type CostDeduction {
  amount: MonetaryAmount
}

type NoDiscount {
  _: Boolean
}

type IndefinitePercentageDiscount {
  percentageDiscount: Float
}

type VisibleNoDiscount {
  _: Boolean
}

type UnknownIncentive {
  _: Boolean
}

union Incentive =
    MonthlyPercentageDiscountFixedPeriod
  | FreeMonths
  | CostDeduction
  | NoDiscount
  | IndefinitePercentageDiscount
  | VisibleNoDiscount
  | UnknownIncentive

type ItemFamily implements ItemCategoryCore {
  id: ID!
  nextKind: ItemCategoryKind
  displayName: String!
  searchTerms: String!
}

type ItemType implements ItemCategoryCore {
  id: ID!
  nextKind: ItemCategoryKind
  displayName: String!
  searchTerms: String!
}

type ItemBrand implements ItemCategoryCore {
  id: ID!
  nextKind: ItemCategoryKind
  displayName: String!
  searchTerms: String!
  companyName: String!
}

type ItemModel implements ItemCategoryCore {
  id: ID!
  nextKind: ItemCategoryKind
  displayName: String!
  searchTerms: String!
}

type ItemCompany implements ItemCategoryCore {
  id: ID!
  nextKind: ItemCategoryKind
  displayName: String!
  searchTerms: String!
}

enum ItemCategoryKind {
  FAMILY
  TYPE
  BRAND
  MODEL
  COMPANY
}

type FileUpload {
  fileUploadUrl: URL
  timestamp: Instant
  mimeType: String
  memberId: ID
}

type ClaimFileUpload {
  claimFileId: ID
  fileUploadUrl: URL
  uploadedAt: Instant
  claimId: ID
  category: String
  contentType: String
}

type PaymentDefault {
  year: Int
  week: Int
  paymentDefaultType: String
  paymentDefaultTypeText: String
  amount: MonetaryAmount
  caseId: String
  claimant: String
}

type Debt {
  paymentDefaults: [PaymentDefault]
  debtDate: LocalDate
  totalAmountPublicDebt: MonetaryAmount
  numberPublicDebts: Int
  totalAmountPrivateDebt: MonetaryAmount
  numberPrivateDebts: Int
  totalAmountDebt: MonetaryAmount
  checkedAt: Instant
  fromDateTime: LocalDateTime
}

type Person {
  debtFlag: Flag
  debt: Debt
  whitelisted: Whitelisted
  status: PersonStatus
}

type PersonStatus {
  flag: Flag
  whitelisted: Boolean
}

type Whitelisted {
  whitelistedAt: Instant
  whitelistedBy: String
}

enum Flag {
  GREEN
  AMBER
  RED
}

input ClaimInformationInput {
  location: String
  date: LocalDate
  item: String
  policeReport: String
  receipt: String
  ticket: String
}

type MonthlySubscription {
  amount: MonetaryAmount
  member: Member
}

type Member {
  memberId: ID!
  email: String
  phoneNumber: String
  firstName: String
  lastName: String
  personalNumber: String
  birthDate: LocalDate
  gender: Gender
  fraudulentStatus: String
  fraudulentStatusDescription: String
  createdOn: Instant
  signedOn: Instant
  status: String
  transactions: [Transaction]
  directDebitStatus: DirectDebitStatus
  payoutMethodStatus: PayoutMethodStatus
  monthlySubscription(month: YearMonth!): MonthlySubscription
  sanctionStatus: SanctionStatus
  account: Account
  fileUploads: [FileUpload!]!
  person: Person
  numberFailedCharges: NumberFailedCharges
  totalNumberOfClaims: Int!
  quotes: [Quote!]!
  contracts: [Contract!]!
  claims(filterByStates: [ClaimState!]): [Claim!]!
  contractMarketInfo: ContractMarketInfo
  pickedLocale: String
  referralInformation: ReferralInformation
  identity: Identity
  trials: [Trial!]!
}

type Identity {
  nationalIdentification: NationalIdentification!
  firstName: String
  lastName: String
}

type NationalIdentification {
  identification: String!
  nationality: String!
}

type ReferralInformation {
  eligible: Boolean!
  campaign: ReferralCampaign!
  referredBy: MemberReferral
  hasReferred: [MemberReferral!]!
  redeemedCampaigns: [RedeemedCampaign!]!
}

type RedeemedCampaign {
  code: String!
  type: String!
  incentive: Incentive!
  redemptionState: RedemptionState!
}

type RedemptionState {
  redeemedAt: Instant!
  activatedAt: Instant
  activeTo: Instant
  terminatedAt: Instant
  unRedeemedAt: Instant
}

type ReferralCampaign {
  code: String!
  incentive: Incentive
}

type MemberReferral {
  memberId: String!
  name: String
  status: String!
  incentive: Incentive!
}

input ManualRedeemCampaignInput {
  campaignCode: String!
  activationDate: LocalDate
}

input ManualUnRedeemCampaignInput {
  campaignCode: String!
}

type ContractMarketInfo {
  market: String!
  preferredCurrency: String!
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

type Quote {
  id: ID!
  createdAt: Instant
  price: Float
  currency: String
  productType: String
  state: String
  initiatedFrom: String
  attributedTo: String
  currentInsurer: String
  startDate: String
  validity: Int
  memberId: ID
  breachedUnderwritingGuidelines: [String!]
  isComplete: Boolean
  schema: JSON
  schemaData: JSON
  signedProductId: ID
  originatingProductId: ID
  isReadyToSign: Boolean
}

input CampaignFilter {
  code: String
  partnerId: String
  activeFrom: LocalDate
  activeTo: LocalDate
}

type ExtraBuilding {
  id: ID
  type: ExtraBuildingType!
  area: Int!
  hasWaterConnected: Boolean!
  displayName: String
}

enum ExtraBuildingType {
  GARAGE
  CARPORT
  SHED
  STOREHOUSE
  FRIGGEBOD
  ATTEFALL
  OUTHOUSE
  GUESTHOUSE
  GAZEBO
  GREENHOUSE
  SAUNA
  BARN
  BOATHOUSE
  OTHER
}

type PaymentCompletionResponse {
  url: String!
}

type Transaction {
  id: ID
  amount: MonetaryAmountV2
  timestamp: Instant
  type: String
  status: String
}

type DirectDebitStatus {
  activated: Boolean
}

type PayoutMethodStatus {
  activated: Boolean
}

enum SanctionStatus {
  Undetermined
  NoHit
  PartialHit
  FullHit
}

type NumberFailedCharges {
  numberFailedCharges: Int!
  lastFailedChargeAt: Instant
}

type Account {
  id: ID!
  currentBalance: MonetaryAmountV2!
  totalBalance: MonetaryAmountV2!
  chargeEstimation: AccountChargeEstimation!
  entries: [AccountEntry!]!
  monthlyEntries: [MonthlyEntry!]!
}

type MonthlyEntry {
  id: ID!
  externalId: String
  amount: MonetaryAmountV2!
  type: String!
  source: String!
  addedBy: String!
  addedAt: Instant!
  title: String!
  comment: String!
}

type AccountChargeEstimation {
  subscription: MonetaryAmountV2!
  discount: MonetaryAmountV2!
  charge: MonetaryAmountV2!
  discountCodes: [String!]!
}

type SchedulerState {
  id: ID!
  member: Member
  status: ChargeStatus!
  changedBy: String!
  changedAt: Instant!
  amount: MonetaryAmount
  transactionId: ID
}

input MemberChargeApproval {
  memberId: ID!
  amount: MonetaryAmount!
}

input MonthlyEntryInput {
  externalId: String
  amount: MonetaryAmount!
  type: String!
  source: String!
  title: String!
  comment: String!
}

input AccountEntryInput {
  type: String!
  amount: MonetaryAmount!
  fromDate: LocalDate!
  reference: String!
  source: String!
  title: String
  comment: String
}

type AccountEntry {
  id: ID!
  type: String!
  amount: MonetaryAmountV2!
  fromDate: LocalDate!
  reference: String!
  source: String!
  title: String
  comment: String
  failedAt: Instant
  chargedAt: Instant
}

enum ClaimSource {
  APP
  EMAIL
  INTERCOM
  PHONE
  CHAT
}

type Claim {
  id: ID!
  member: Member!
  recordingUrl: String
  state: ClaimState!
  type: ClaimType
  reserves: MonetaryAmount
  registrationDate: Instant!
  notes: [ClaimNote!]!
  transcriptions: [ClaimTranscription!]!
  payments: [ClaimPayment!]!
  events: [ClaimEvent!]!
  coveringEmployee: Boolean!
  claimFiles: [ClaimFileUpload!]!
  contract: Contract
  agreement: GenericAgreement
  itemSet: ClaimItemSet!
}

type ClaimItemSet {
  items: [ClaimItem!]!
}

type ClaimNote {
  text: String!
  date: LocalDateTime!
  handlerReference: String
}

type ClaimTranscription {
  text: String!
  confidenceScore: Float!
  languageCode: String!
}

enum ClaimTypes {
  TheftClaim
  AccidentalDamageClaim
  AssaultClaim
  WaterDamageClaim
  TravelAccidentClaim
  LuggageDelayClaim
  NotCoveredClaim
  FireDamageClaim
  ApplianceClaim
  ConfirmedFraudClaim
  LiabilityClaim
  LegalProtectionClaim
  WaterDamageBathroomClaim
  WaterDamageKitchenClaim
  BurglaryClaim
  FloodingClaim
  EarthquakeClaim
  InstallationsClaim
  SnowPressureClaim
  StormDamageClaim
  VerminAndPestsClaim
  DuplicateClaim
  OtherClaim
  TestClaim
}
union ClaimType =
    TheftClaim
  | AccidentalDamageClaim
  | AssaultClaim
  | WaterDamageClaim
  | TravelAccidentClaim
  | LuggageDelayClaim
  | NotCoveredClaim
  | FireDamageClaim
  | ConfirmedFraudClaim
  | LiabilityClaim
  | ApplianceClaim
  | LegalProtectionClaim
  | WaterDamageBathroomClaim
  | WaterDamageKitchenClaim
  | BurglaryClaim
  | FloodingClaim
  | EarthquakeClaim
  | InstallationsClaim
  | SnowPressureClaim
  | StormDamageClaim
  | VerminAndPestsClaim
  | OtherClaim
  | DuplicateClaim
  | TestClaim

type TheftClaim {
  location: String
  date: LocalDate
  item: String
  policeReport: String
  receipt: String
}

type AccidentalDamageClaim {
  location: String
  date: LocalDate
  item: String
  policeReport: String
  receipt: String
}

type AssaultClaim {
  location: String
  date: LocalDate
  policeReport: String
}

type WaterDamageClaim {
  date: LocalDate
}

type TravelAccidentClaim {
  location: String
  date: LocalDate
  policeReport: String
  receipt: String
}

type LuggageDelayClaim {
  location: String
  date: LocalDate
  ticket: String
}

type ConfirmedFraudClaim {
  date: LocalDate
}

type LiabilityClaim {
  date: LocalDate
  location: String
}

type FireDamageClaim {
  location: String
  date: LocalDate
}

type ApplianceClaim {
  location: String
  date: LocalDate
  item: String
}

type LegalProtectionClaim {
  date: LocalDate
}

type WaterDamageBathroomClaim {
  date: LocalDate
}

type WaterDamageKitchenClaim {
  date: LocalDate
}

type BurglaryClaim {
  location: String
  date: LocalDate
  item: String
  policeReport: String
  receipt: String
}

type FloodingClaim {
  date: LocalDate
}

type EarthquakeClaim {
  date: LocalDate
}

type InstallationsClaim {
  date: LocalDate
  item: String
  location: String
}

type SnowPressureClaim {
  date: LocalDate
}

type StormDamageClaim {
  date: LocalDate
}

type VerminAndPestsClaim {
  date: LocalDate
}

type OtherClaim {
  location: String
  date: LocalDate
  item: String
  policeReport: String
  receipt: String
}

type NotCoveredClaim {
  date: LocalDate
}

type DuplicateClaim {
  date: LocalDate
}

type TestClaim {
  date: LocalDate
}

type ClaimPayment {
  id: String
  amount: MonetaryAmount
  deductible: MonetaryAmount
  note: String
  type: ClaimPaymentType
  timestamp: Instant
  exGratia: Boolean
  transaction: Transaction
  status: ClaimPaymentStatus
}

enum ClaimPaymentStatus {
  PREPARED
  INITIATED
  SANCTION_LIST_HIT
  COMPLETED
  FAILED
}

input ClaimPaymentInput {
  amount: MonetaryAmount!
  deductible: MonetaryAmount!
  note: String!
  type: ClaimPaymentType!
  exGratia: Boolean!
  sanctionListSkipped: Boolean!
  carrier: String!
}

input ClaimSwishPaymentInput {
  amount: MonetaryAmount!
  deductible: MonetaryAmount!
  note: String!
  exGratia: Boolean!
  sanctionListSkipped: Boolean!
  phoneNumber: String!
  message: String!
  carrier: String!
}

input ClaimNoteInput {
  text: String!
}

type ClaimEvent {
  text: String
  date: Instant
}

type SwitchableSwitcherEmail {
  id: ID!
  member: Member!
  switcherCompany: String!
  queuedAt: Instant!
  contract: Contract
  sentAt: Instant
  remindedAt: Instant
  cancellationDate: LocalDate
  switcherType: String
  note: String
}

input UpdateSwitcherEmailInfoInput {
  note: String
}

enum ClaimState {
  OPEN
  CLOSED
  REOPENED
}

enum ClaimPaymentType {
  Manual
  Automatic
  IndemnityCost
  Expense
}

enum ChargeStatus {
  INITIATED
  WAITING_FOR_SUBSCRIPTION
  SCHEDULING_SUBSCRIPTION
  SCHEDULE_SUBSCRIPTION_FAILED
  SUBSCRIPTION_SCHEDULED_AND_WAITING_FOR_APPROVAL
  APPROVED_FOR_CHARGE
  SCHEDULING_CHARGE
  CHARGE_REQUESTING
  CHARGE_REQUEST_FAILED
  CHARGE_INITIATED
  CHARGE_FAILED
  CHARGE_COMPLETED
}

type QuestionGroup {
  id: ID!
  memberId: ID!
  questions: [Question!]!
  member: Member
}

type Question {
  id: ID!
  timestamp: Instant!
  messageJsonString: String!
}

input CreateNorwegianGripenInput {
  baseFactorString: String
  factors: [NorwegianGripenFactorInput!]!
}

input NorwegianGripenFactorInput {
  factorType: NorwegianGripenFactorType!
  factorString: String!
}

enum NorwegianGripenFactorType {
  AGE
  CENTRALITY_GROUP
  ECONOMY_OF_MUNICIPALITY
  NUMBER_OF_PEOPLE
  SQUARE_METERS
  HOUSEHOLD_TYPE
  DEDUCTIBLE
}

type ChatMessage {
  globalId: ID!
  author: String
  fromId: String!
  timestamp: Instant
  messageBodyJsonString: String!
}

union SendMessageResponse = SendMessageSuccessful | SendMessageFailed

type SendMessageSuccessful {
  memberId: String!
}

type SendMessageFailed {
  memberId: String!
  errorCode: Int!
  errorMessage: String!
}

input SendMessageInput {
  memberId: ID!
  message: String!
  forceSendMessage: Boolean!
}

type Trial {
  id: ID!
  fromDate: LocalDate!
  toDate: LocalDate!
  displayName: String!
  partner: String!
  address: TrialAddress!
  certificateUrl: String
  status: String!
  createdAt: Instant!
}

type TrialAddress {
  street: String!
  city: String!
  zipCode: String!
  livingSpace: Int
  apartmentNo: String
  floor: Int
}

type MonetaryAmountV2 {
  amount: String!
  currency: String!
}

enum ClaimComplexity {
  SIMPLE
  COMPLEX
}

# A String-representation of `java.time.YearMonth`, ex: `"2018-06"`
scalar YearMonth
# An object-representation of `javax.money.MonetaryAmount`, ex: `{"amount": 100  "currency": "SEK"}`
scalar MonetaryAmount
# A String-representation of `java.time.ZonedDateTime`, ex: `"2018-09-21T14:17:46.536405+02:00[Europe/Stockholm]"`
scalar ZonedDateTime
# A String-representation of `java.time.LocalDate`, ex:  `"2018-09-26"`
scalar LocalDate
# A String-representation of `java.time.LocalTime`
scalar LocalTime
# A String-representation of `java.time.LocalDateTIme`, ex: `"2018-06-11T20:08:30.123456"`
scalar LocalDateTime
# A String-representation of `java.time.Instant`, ex: `"2018-06-11T20:08:30.123456"`
scalar Instant
# A String-representation of `java.net.URL`, ex: "https://www.google.com/"
scalar URL
# A Json Object represtation of `JsonNode`
scalar JSON

scalar BigDecimal
